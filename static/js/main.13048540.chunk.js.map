{"version":3,"sources":["useViewCounter.hook.js","useClickOutside.hook.js","Parameters.js","CustomizedBar.js","PointerBar.js","DemoApp.js","App.js","index.js","pointerBar.module.scss"],"names":["useViewCounter","slug","useState","views","setViews","useEffect","fetch","mode","then","res","json","totalViews","catch","err","console","error","message","useClickOutside","initialIsVisible","isVisible","setIsVisible","ref","useRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","Parameters","handleChange","handleBgChange","handleBaseBgChange","handleLabelColorChange","handleIsLabelVisibleChange","barColor","setBarColor","baseBgColor","setBaseBgColor","labelColor","setLabelColor","cpOne","cpTwo","cpThree","className","htmlFor","name","id","type","placeholder","onChange","onClick","style","position","marginTop","color","onChangeComplete","hex","value","defaultValue","CustomizedBar","INITIAL_STATE","completed","bgColor","height","width","borderRadius","labelAlignment","labelSize","margin","padding","isLabelVisible","transitionDuration","transitionTimingFunction","dir","maxCompleted","customLabel","undefined","state","setState","showCode","setShowCode","codeValue","setCodeValue","copySuccess","setCopySuccess","textAreaRef","handleReset","code","replace","e","select","execCommand","focus","PointerBar","styles","myClassName","DemoApp","setCompleted","setInterval","Math","floor","random","borderTop","paddingTop","App","window","location","pathname","charAt","substring","getSlug","ReactDOM","render","getElementById","module","exports"],"mappings":"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","file":"static/js/main.13048540.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nconst useViewCounter = (slug) => {\n  const [views, setViews] = useState(null);\n\n  useEffect(() => {\n    // Don't count views on localhost\n    if (process.env.NODE_ENV !== \"production\") {\n      return;\n    }\n\n    fetch(`https://my-projects-dashboard.vercel.app/api/views/${slug}`, {\n      mode: \"no-cors\",\n    })\n      .then((res) => res.json())\n      .then((json) => {\n        setViews(json.totalViews);\n      })\n      .catch((err) => console.error(err.message));\n  }, [slug]);\n  return { views };\n};\n\nexport default useViewCounter;\n","import { useEffect, useState, useRef } from \"react\";\n\nconst useClickOutside = initialIsVisible => {\n  const [isVisible, setIsVisible] = useState(initialIsVisible);\n  const ref = useRef(null);\n\n  const handleClickOutside = event => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setIsVisible(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClickOutside, true);\n\n    return () => {\n      document.removeEventListener(\"click\", handleClickOutside, true);\n    };\n  }, []);\n\n  return { ref, isVisible, setIsVisible };\n};\n\nexport default useClickOutside;\n","import React, { useState } from \"react\";\nimport { ChromePicker } from \"react-color\";\nimport useClickOutside from \"./useClickOutside.hook\";\nimport \"./parameters.styles.scss\";\n\nconst Parameters = ({\n  handleChange,\n  handleBgChange,\n  handleBaseBgChange,\n  handleLabelColorChange,\n  handleIsLabelVisibleChange,\n}) => {\n  const [barColor, setBarColor] = useState(\"#6a1b9a\");\n  const [baseBgColor, setBaseBgColor] = useState(\"#e0e0de\");\n  const [labelColor, setLabelColor] = useState(\"#e80909\");\n  const cpOne = useClickOutside(false);\n  const cpTwo = useClickOutside(false);\n  const cpThree = useClickOutside(false);\n\n  const handleColorChangeCpOne = (color) => {\n    setBarColor(color.hex);\n    handleBgChange(color.hex);\n  };\n\n  const handleColorChangeCpTwo = (color) => {\n    setBaseBgColor(color.hex);\n    handleBaseBgChange(color.hex);\n  };\n\n  const handleColorChangeCpThree = (color) => {\n    setLabelColor(color.hex);\n    handleLabelColorChange(color.hex);\n  };\n\n  return (\n    <>\n      <div className=\"param\">\n        <label htmlFor=\"completed\">completed</label>\n        <input\n          name=\"completed\"\n          id=\"completed\"\n          type=\"text\"\n          placeholder=\"1-100\"\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"param\">\n        <label htmlFor=\"maxCompleted\">max completed</label>\n        <input\n          name=\"maxCompleted\"\n          id=\"maxCompleted\"\n          type=\"text\"\n          placeholder=\"number\"\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"param\">\n        <label htmlFor=\"customLabel\">custom label</label>\n        <input\n          name=\"customLabel\"\n          id=\"customLabel\"\n          type=\"text\"\n          placeholder=\"any text\"\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"param\">\n        <button onClick={() => cpOne.setIsVisible(true)}>\n          Choose Bar Color\n        </button>\n        {cpOne.isVisible && (\n          <div\n            ref={cpOne.ref}\n            style={{ position: \"absolute\", marginTop: \"30px\" }}\n          >\n            <ChromePicker\n              name=\"barColor\"\n              color={barColor}\n              onChangeComplete={handleColorChangeCpOne}\n            />\n          </div>\n        )}\n        <input\n          value={barColor}\n          name=\"bgColor\"\n          type=\"text\"\n          onChange={(event) => {\n            handleChange(event);\n            setBarColor(event.target.value);\n          }}\n        />\n      </div>\n      <div className=\"param\">\n        <label htmlFor=\"height\">height</label>\n        <input\n          name=\"height\"\n          id=\"height\"\n          type=\"text\"\n          placeholder=\"20px\"\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"param\">\n        <label htmlFor=\"width\">width</label>\n        <input\n          name=\"width\"\n          id=\"width\"\n          type=\"text\"\n          placeholder=\"100%\"\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"param\">\n        <label htmlFor=\"borderRadius\">border radius</label>\n        <input\n          name=\"borderRadius\"\n          id=\"borderRadius\"\n          type=\"text\"\n          placeholder=\"50px\"\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"param\">\n        <label htmlFor=\"labelAlignment\">label alignment</label>\n        <select\n          name=\"labelAlignment\"\n          defaultValue=\"right\"\n          id=\"labelAlignment\"\n          onChange={handleChange}\n        >\n          <option value=\"left\">left</option>\n          <option value=\"center\">center</option>\n          <option value=\"right\">right</option>\n          <option value=\"outside\">outside</option>\n        </select>\n      </div>\n      <div className=\"param\">\n        <button onClick={() => cpThree.setIsVisible(true)}>\n          Choose Label Color\n        </button>\n        {cpThree.isVisible && (\n          <div\n            ref={cpThree.ref}\n            style={{ position: \"absolute\", marginTop: \"30px\" }}\n          >\n            <ChromePicker\n              name=\"labelColor\"\n              color={labelColor}\n              onChangeComplete={handleColorChangeCpThree}\n            />\n          </div>\n        )}\n        <input\n          value={labelColor}\n          name=\"labelColor\"\n          type=\"text\"\n          onChange={(event) => {\n            handleChange(event);\n            setBaseBgColor(event.target.value);\n          }}\n        />\n      </div>\n      <div className=\"param\">\n        <label htmlFor=\"labelSize\">label size</label>\n        <input\n          name=\"labelSize\"\n          id=\"labelSize\"\n          type=\"text\"\n          placeholder=\"15px\"\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"param\">\n        <label htmlFor=\"isLabelVisible\">is label visible</label>\n        <select\n          name=\"isLabelVisible\"\n          defaultValue=\"true\"\n          id=\"isLabelVisible\"\n          onChange={handleIsLabelVisibleChange}\n        >\n          <option value={true}>True</option>\n          <option value={false}>False</option>\n        </select>\n      </div>\n      <div className=\"param\">\n        <button onClick={() => cpTwo.setIsVisible(true)}>\n          Choose \"non-completed\" Bar Color\n        </button>\n        {cpTwo.isVisible && (\n          <div\n            ref={cpTwo.ref}\n            style={{ position: \"absolute\", marginTop: \"30px\" }}\n          >\n            <ChromePicker\n              name=\"baseBgColor\"\n              color={baseBgColor}\n              onChangeComplete={handleColorChangeCpTwo}\n            />\n          </div>\n        )}\n        <input\n          value={baseBgColor}\n          name=\"baseBgColor\"\n          type=\"text\"\n          onChange={(event) => {\n            handleChange(event);\n            setBaseBgColor(event.target.value);\n          }}\n        />\n      </div>\n      <div className=\"param\">\n        <label htmlFor=\"margin\">margin</label>\n        <input name=\"margin\" id=\"margin\" type=\"text\" onChange={handleChange} />\n      </div>\n      <div className=\"param\">\n        <label htmlFor=\"padding\">padding</label>\n        <input\n          name=\"padding\"\n          id=\"padding\"\n          type=\"text\"\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"param\">\n        <label htmlFor=\"transitionDuration\">transition duration</label>\n        <input\n          name=\"transitionDuration\"\n          id=\"transitionDuration\"\n          type=\"text\"\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"param\">\n        <label htmlFor=\"transitionTimingFunction\">\n          transition timing function\n        </label>\n        <select\n          name=\"transitionTimingFunction\"\n          defaultValue=\"right\"\n          id=\"transitionTimingFunction\"\n          onChange={handleChange}\n        >\n          <option value=\"ease-in-out\">ease-in-out</option>\n          <option value=\"ease\">ease</option>\n          <option value=\"linear\">linear</option>\n          <option value=\"ease-in\">ease-in</option>\n          <option value=\"ease-out\">ease-out</option>\n        </select>\n      </div>\n      <div className=\"param\">\n        <label htmlFor=\"dir\">direction</label>\n        <select name=\"dir\" defaultValue=\"ltr\" id=\"dir\" onChange={handleChange}>\n          <option value=\"ltr\">ltr</option>\n          <option value=\"rtl\">rtl</option>\n          <option value=\"auto\">auto</option>\n        </select>\n      </div>\n    </>\n  );\n};\n\nexport default Parameters;\n","import React, { useState, useRef } from \"react\";\n\nimport Parameters from \"./Parameters\";\nimport ProgressBar from \"@ramonak/react-progress-bar\";\nimport \"./customizedBar.styles.scss\";\n\nconst CustomizedBar = () => {\n  const INITIAL_STATE = {\n    completed: 50,\n    bgColor: \"#6a1b9a\",\n    height: \"20px\",\n    width: \"100%\",\n    borderRadius: \"50px\",\n    labelAlignment: \"right\",\n    baseBgColor: \"#e0e0de\",\n    labelColor: \"#e80909\",\n    labelSize: \"15px\",\n    margin: \"\",\n    padding: \"\",\n    isLabelVisible: true,\n    transitionDuration: \"1s\",\n    transitionTimingFunction: \"ease-in-out\",\n    dir: \"ltr\",\n    maxCompleted: 100,\n    customLabel: undefined,\n  };\n\n  const [state, setState] = useState(INITIAL_STATE);\n  const [showCode, setShowCode] = useState(false);\n  const [codeValue, setCodeValue] = useState(\"\");\n  const [copySuccess, setCopySuccess] = useState(\"Copy\");\n  const textAreaRef = useRef(null);\n\n  const handleChange = (event) => {\n    setState({\n      ...state,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const handleBgChange = (color) => {\n    setState({\n      ...state,\n      bgColor: color,\n    });\n  };\n\n  const handleBaseBgChange = (color) => {\n    setState({\n      ...state,\n      baseBgColor: color,\n    });\n  };\n\n  const handleLabelColorChange = (color) => {\n    setState({\n      ...state,\n      labelColor: color,\n    });\n  };\n\n  const handleReset = () => {\n    setState(INITIAL_STATE);\n    setShowCode(false);\n  };\n\n  const handleIsLabelVisibleChange = (value) => {\n    setState({\n      ...state,\n      isLabelVisible: value === \"true\",\n    });\n  };\n\n  const copyToClipboard = (e) => {\n    textAreaRef.current.select();\n    document.execCommand(\"copy\");\n    e.target.focus();\n    setCopySuccess(\"Copied!\");\n  };\n\n  const generateCode = () => {\n    setCopySuccess(\"Copy\");\n    setShowCode(true);\n    const tempCode = `<ProgressBar \n    completed={${state.completed}}\n    ${state.bgColor === \"#6a1b9a\" ? \"\" : `bgColor=\"${state.bgColor}\"`}\n    ${state.height === \"20px\" ? \"\" : `height=\"${state.height}\"`}\n    ${state.width === \"100%\" ? \"\" : `width=\"${state.width}\"`}\n    ${\n      state.borderRadius === \"50px\"\n        ? \"\"\n        : `borderRadius=\"${state.borderRadius}\"`\n    }\n    ${\n      state.labelAlignment === \"right\"\n        ? \"\"\n        : `labelAlignment=\"${state.labelAlignment}\"`\n    }\n    ${state.isLabelVisible ? \"\" : `isLabelVisible={false}`}\n    ${\n      state.baseBgColor === \"#e0e0de\"\n        ? \"\"\n        : `baseBgColor=\"${state.baseBgColor}\"`\n    }\n    ${state.labelColor === \"#fff\" ? \"\" : `labelColor=\"${state.labelColor}\"`}\n    ${state.labelSize === \"15px\" ? \"\" : `labelSize=\"${state.labelSize}\"`}\n    ${state.margin === \"\" ? \"\" : `margin=\"${state.margin}\"`}\n    ${state.padding === \"\" ? \"\" : `padding=\"${state.padding}\"`}\n    ${\n      state.transitionDuration === \"1s\"\n        ? \"\"\n        : `transitionDuration=\"${state.transitionDuration}\"`\n    }\n    ${\n      state.transitionTimingFunction === \"ease-in-out\"\n        ? \"\"\n        : `transitionTimingFunction=\"${state.transitionTimingFunction}\"`\n    }\n    ${state.dir === \"ltr\" ? \"\" : `dir=\"${state.dir}\"`}\n    ${state.maxCompleted === 100 ? \"\" : `maxCompleted={${state.maxCompleted}}`}\n    ${state.customLabel ? `customLabel=\"${state.customLabel}\"` : \"\"}\n    />`;\n    const code = tempCode.replace(/^\\s*$(?:\\r\\n?|\\n)/gm, \"\");\n    setCodeValue(code);\n  };\n\n  return (\n    <>\n      <ProgressBar {...state} />\n      <Parameters\n        handleChange={handleChange}\n        handleBgChange={handleBgChange}\n        handleBaseBgChange={handleBaseBgChange}\n        handleLabelColorChange={handleLabelColorChange}\n        handleIsLabelVisibleChange={handleIsLabelVisibleChange}\n        handleReset={handleReset}\n      />\n      <button className=\"reset-button\" onClick={handleReset}>\n        RESET\n      </button>\n      <button className=\"code-button\" onClick={generateCode}>\n        Generate Component Code\n      </button>\n      <div>\n        {showCode && (\n          <div className=\"code-area\">\n            <button onClick={copyToClipboard}>{copySuccess}</button>\n            <textarea\n              ref={textAreaRef}\n              value={codeValue}\n              onChange={(e) => setCodeValue(e.target.value)}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default CustomizedBar;\n","import React from 'react'\nimport ProgressBar from '@ramonak/react-progress-bar'\nimport styles from './pointerBar.module.scss'\n\nconst PointerBar = () => (\n    <ProgressBar completed={50} className={styles.myClassName} />\n)\n\nexport default PointerBar","import React, { useState, useEffect } from \"react\";\nimport CustomizedBar from \"./CustomizedBar\";\nimport ProgressBar from \"@ramonak/react-progress-bar\";\nimport PointerBar from \"./PointerBar\";\n\nconst DemoApp = () => {\n  const [completed, setCompleted] = useState(0);\n\n  useEffect(() => {\n    setInterval(() => setCompleted(Math.floor(Math.random() * 100) + 1), 2000);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h3>Randomly generated completed value</h3>\n      <ProgressBar completed={completed} />\n      <hr />\n      <h3>Interactive Generator</h3>\n      <CustomizedBar />\n      <h3 style={{ borderTop: \"1px black solid\", paddingTop: \"20px\" }}>\n        Example of the <i>className</i> prop of the parent <i>div</i> usage\n      </h3>\n      <p>\n        <i>cursor: pointer</i> CSS prop applied\n      </p>\n      <PointerBar />\n    </div>\n  );\n};\n\nexport default DemoApp;\n","import React from \"react\";\nimport useViewCounter from \"./useViewCounter.hook\";\nimport DemoApp from \"./DemoApp\";\n\nconst App = () => {\n  const getSlug = () => {\n    let slug = window.location.pathname;\n    if (slug.charAt(0) === \"/\") {\n      slug = slug.substring(1);\n    }\n    return slug;\n  };\n  useViewCounter(getSlug());\n\n  return (\n    <div className=\"App\">\n      <DemoApp />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myClassName\":\"pointerBar_myClassName__PxdAv\"};"],"sourceRoot":""}